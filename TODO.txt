TODO Week:
-------
- Raid Delete
- Resetear el disco? Se formatea el disco
// No dejar formatear si se est´a reproduciendo o capturando


####### TODO ROOT #######

## Check rendimiento ##

raid-devices=contar el numero de devices

raid_de
# Configuracion para el raid de disco (guardada donde la fpga)
--raid-devices=8 /dev/sdc /dev/sdd /dev/sde /dev/sdf /dev/sdg /dev/sdh /dev/sdi /dev/sdj
ls


#check global
dd if="/dev/md0" of=/dev/null bs=16MB  count=256  iflag=direct 2>&1 | tail -n1 | awk '{print int($1/$6)}'

#check unitario por cada sd[c-j]
dd if="/dev/sde" of=/dev/null bs=4MB  count=256  iflag=direct 2>&1 | tail -n1 | awk '{print int($1/$6)}'

## Formatear ##

umount /mnt/raid
mdadm --stop /dev/md0
mdadm --remove /dev/md0

## Ejecutar por cada sd[c-j], en este caso de ejemplo sde
hdparm --user-master u --security-set-pass Eins /dev/sde
hdparm --user-master u --security-erase Eins /dev/sde

## Recrear raid ##

mdadm --create /dev/md0  --level=0 --raid-devices=8 /dev/sdc /dev/sdd /dev/sde /dev/sdf /dev/sdg /dev/sdh /dev/sdi /dev/sdj 
mkfs.xfs /dev/md0
mount /dev/md0 /mnt/raid #montamos el disco, o reiniciamos y se monta solo con la linea de abajo

## Asegurarse de que en FSTAB esta la linea, para que se monte de forma automatica al reiniciar
/dev/md0             /mnt/raid               xfs     defaults        1 2


TODO Future:
-------
  - testSimple para detectar trazas simple validas
  - actualizar testSimple.c para que añada al final el nº de paquetes
    - en launchRecorder.sh, que se llame despues a testSimple y añada esto
  - Storage: dd discos, estadisticas, resetear
  - Terminar de probar todo con los binarios nuevos

Jose:
-------
  - Nuevos binarios finales de todo cuando este listo testSimple.c (solo queda eso!!! :D)

Ideas pagina de statistics
------
  - Testear raid (dd), rendimiento, formatear

_________________________________________________________________________________________

Cosas a mencionar en la memoria:
  - Esquema de la arquitectura
    - Por qué PHP
      - Composer
    - Bower
    - Por qué io.js
    - Restricciones (red local entre php e io.js)
      - Redes distintas para control/tráfico
  - Esquema de comunicaciones/protocolos entre las 3 partes
  - Diseño de la aplicación, responsive, temas, atractiva visualmente, mejora de manejo respecto a consola
  - Framework MVC+Router+Logger desarrollado en PHP. Traducción de rutas, configuración, componentes:
    - rewrite (htaccess)
    - gettext
    - composer
    - bower
  - Localización
    - Importancia, gettext()
    - PHP+JavaScript, reto
    - Solución .js.php
    - Solución caché ficheros, time()+guardar última modificación
  - REST(-based) stack (express, io.js) service, filosofía
    - Distintas partes. Máquina de estados finito
    - Diferencias y restricciones respecto a restful
    - Llamadas asíncronas
    - Algoritmo utilizado
    - JSONP, cross-domain <-> Proxy
    - Supervisor, cambios en javascript sin reiniciar
    - Timestamps (extra, no necesario, vlan distintas)
  - Documentación
    - Wiki
    - phpDocumentor
    - apiDoc
    - Web Service
  - Posibles mejoras
    - Estandarización, futuras fpgas con características parecidas
    - Más idiomas
    - Más estadísticas
    - Módulo de seguridad

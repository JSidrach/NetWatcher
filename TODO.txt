TODO Week
-------
  - Mejorar comentarios

TODO Future:
-------
  - optimizaciones capinfo -t?
  - testSimple para detectar trazas simple validas?
  - actualizar testSimple.c para que añada al final el nº de paquetes
    - en launchRecorder.sh, que se llame despues a testSimple y añada esto
  - Terminar de probar todo con los binarios nuevos
    - Sobre todo captura/reproduccion/conversion
    - Ver como va a 10G
  - Probar delete_raid, storage gui
  - Captures/all va lento por el capinfos -t, como mejorar?
      - Ver si va mejor en dagda

Jose:
-------
  - Nuevos binarios finales de todo cuando este listo testSimple.c (solo queda eso!!! :D)
  
_________________________________________________________________________________________

Cosas a mencionar en la memoria:
  - Esquema de la arquitectura
    - Por qué PHP
      - Composer
    - Bower
    - Por qué io.js
    - Restricciones (red local entre php e io.js)
      - Redes distintas para control/tráfico
  - Esquema de comunicaciones/protocolos entre las 3 partes
  - Diseño de la aplicación, responsive, temas, atractiva visualmente, mejora de manejo respecto a consola
  - Framework MVC+Router+Logger desarrollado en PHP. Traducción de rutas, configuración, componentes:
    - rewrite (htaccess)
    - gettext
    - composer
    - bower
  - Localización
    - Importancia, gettext()
    - PHP+JavaScript, reto
    - Solución .js.php
    - Solución caché ficheros, time()+guardar última modificación
  - REST(-based) stack (express, io.js) service, filosofía
    - Distintas partes. Máquina de estados finito
    - Diferencias y restricciones respecto a restful
    - Llamadas asíncronas
    - Algoritmo utilizado
    - JSONP, cross-domain <-> Proxy
    - Supervisor, cambios en javascript sin reiniciar
    - Timestamps (extra, no necesario, vlan distintas)
  - Documentación
    - Wiki
    - phpDocumentor
    - apiDoc
    - Web Service
  - Posibles mejoras
    - Estandarización, futuras fpgas con características parecidas
    - Más idiomas
    - Más estadísticas
    - Módulo de seguridad

_________________________________________________________________________________________

Esquema de la memoria (* = generación semiautomática, - = contenido propio):

* Portada
- Agradecimientos
- Abstract/Resumen
* Glosario
* Acrónimos
* Índice General
* Índice de tablas
* Índice de figuras

- Introducción
  - Ámbito
  - Motivación
  - Objetivos
  - Estructura del documento

- Estado del arte
  [Introducción]
  - Sistemas de captura/reproducción de tráfico web
  - Sistemas de gestión y monitorización
  - Conclusiones

- Definición del proyecto
  [Introducción]
  - Objetivos
  - Alcance
  - Metodología
    {Sprints}
  - Herramientas
    {Dividir en Back-End y Front-End}
    {Lista de herramientas, una subsección por cada una}

- Requisitos
  [Introducción]
  - Requisitos Funcionales
  - Requisitos No Funcionales

- Diseño
  [Introducción]
  - Arquitectura
    {Front-End/Back-End}
  - Módulos
    [Introducción]
    - Gestor
      {Capturador/Reproductor}
    - Capturas
      {Detección,Conversión,Renombrado,Borrado}
    - Estado/Estadísticas
      {Velocidad,Estado,RAID}
  - Servicio Web FPGA
    {REST-like,asíncrono}
  - Interfaz Gráfica
    {Diseño adaptativo,localización}
    {Maquetas}

- Implementación
  [Introducción]
  - Back-End
    [Introducción]
    {io.js,express,supervisor,apiDoc,npm}
    {API ~REST,mensajes json}
    {Servicio}
  - Front-End
    [Introducción]
    - {MVC propio,Bootstrap,jQuery,gettext,phpDocumentor,composer,bower}
    - Traducciones
    - Temas

- Pruebas
  [Introducción]
  - Pruebas de verificación
  - Pruebas de validación

- Mantenimiento
  [Introducción]
  {Open Source/GitHub Issues/Pull Requests}

- Uso de la aplicación
  [Introducción]
  - Instalación
  - Configuración
  - Casos de uso
    {Apéndice Manual de Usuario}

- Conclusiones

- Líneas de trabajo futuras

* Bibliografía

- Apéndices
  - Manual de Usuario
    [Introducción]
    {Descripción detallada}
  - Framework MVC propio
    [Introducción]
    - MVC
    - Router
    - Logger
    - Conclusiones
  - Programación asíncrona
  - FPGA Web Service API